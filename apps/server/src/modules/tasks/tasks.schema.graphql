type Task implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  title: String!
  description: String
  status: TaskStatus!
  assignee: User
  createdBy: User
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

type TaskEdge {
  cursor: Cursor!
  node: Task!
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
}

type Query {
  task(id: ID!): Task
  tasks(first: Int, after: Cursor): TaskConnection!
}

type Mutation {
  createTask(input: CreateTaskInput): Task
  updateTask(id: ID!, input: UpdateTaskInput): Task
  deleteTask(id: ID!): Task
}

input CreateTaskInput {
  title: String!
  description: String
  status: TaskStatus!
  assigneeId: ID!
}

input UpdateTaskInput {
  title: String
  description: String
  status: TaskStatus
  assigneeId: ID
}
