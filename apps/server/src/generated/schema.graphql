scalar Date

interface Node {
  id: ID!
}

type Task implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  title: String!
  description: String
  status: TaskStatus!
  assignedTo: User
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

type Query {
  task(id: ID!): Task
  tasks: [Task]
  tasksByUser(userId: ID!): [Task]
  user(id: ID!): User
  users: [User]
}

type Mutation {
  createTask(title: String!, description: String, status: TaskStatus!, assignedTo: ID): Task
  updateTask(id: ID!, title: String, description: String, status: TaskStatus, assignedTo: ID): Task
  deleteTask(id: ID!): Task
  createUser(fullName: String!, email: String!, password: String!, bio: String): User
  updateUser(id: ID!, fullName: String, email: String, password: String, bio: String): User
  deleteUser(id: ID!): User
}

type User implements Node {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  fullName: String!
  email: String!
  bio: String
}

schema {
  query: Query
  mutation: Mutation
}